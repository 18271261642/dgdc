package com.jkcq.homebike.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jkcq.homebike.db.Summary;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUMMARY".
*/
public class SummaryDao extends AbstractDao<Summary, Long> {

    public static final String TABLENAME = "SUMMARY";

    /**
     * Properties of entity Summary.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Day = new Property(1, String.class, "day", false, "DAY");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property DeviceType = new Property(3, String.class, "deviceType", false, "DEVICE_TYPE");
        public final static Property SummaryType = new Property(4, String.class, "summaryType", false, "SUMMARY_TYPE");
        public final static Property TotalDuration = new Property(5, String.class, "totalDuration", false, "TOTAL_DURATION");
        public final static Property TotalDistance = new Property(6, String.class, "totalDistance", false, "TOTAL_DISTANCE");
        public final static Property TotalCalorie = new Property(7, String.class, "totalCalorie", false, "TOTAL_CALORIE");
        public final static Property TotalPowerGeneration = new Property(8, String.class, "totalPowerGeneration", false, "TOTAL_POWER_GENERATION");
        public final static Property TotalTimes = new Property(9, String.class, "totalTimes", false, "TOTAL_TIMES");
        public final static Property UpgradeId = new Property(10, String.class, "upgradeId", false, "UPGRADE_ID");
    }


    public SummaryDao(DaoConfig config) {
        super(config);
    }
    
    public SummaryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUMMARY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DAY\" TEXT," + // 1: day
                "\"USER_ID\" TEXT," + // 2: userId
                "\"DEVICE_TYPE\" TEXT," + // 3: deviceType
                "\"SUMMARY_TYPE\" TEXT," + // 4: summaryType
                "\"TOTAL_DURATION\" TEXT," + // 5: totalDuration
                "\"TOTAL_DISTANCE\" TEXT," + // 6: totalDistance
                "\"TOTAL_CALORIE\" TEXT," + // 7: totalCalorie
                "\"TOTAL_POWER_GENERATION\" TEXT," + // 8: totalPowerGeneration
                "\"TOTAL_TIMES\" TEXT," + // 9: totalTimes
                "\"UPGRADE_ID\" TEXT);"); // 10: upgradeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUMMARY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Summary entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(2, day);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindString(4, deviceType);
        }
 
        String summaryType = entity.getSummaryType();
        if (summaryType != null) {
            stmt.bindString(5, summaryType);
        }
 
        String totalDuration = entity.getTotalDuration();
        if (totalDuration != null) {
            stmt.bindString(6, totalDuration);
        }
 
        String totalDistance = entity.getTotalDistance();
        if (totalDistance != null) {
            stmt.bindString(7, totalDistance);
        }
 
        String totalCalorie = entity.getTotalCalorie();
        if (totalCalorie != null) {
            stmt.bindString(8, totalCalorie);
        }
 
        String totalPowerGeneration = entity.getTotalPowerGeneration();
        if (totalPowerGeneration != null) {
            stmt.bindString(9, totalPowerGeneration);
        }
 
        String totalTimes = entity.getTotalTimes();
        if (totalTimes != null) {
            stmt.bindString(10, totalTimes);
        }
 
        String upgradeId = entity.getUpgradeId();
        if (upgradeId != null) {
            stmt.bindString(11, upgradeId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Summary entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(2, day);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindString(4, deviceType);
        }
 
        String summaryType = entity.getSummaryType();
        if (summaryType != null) {
            stmt.bindString(5, summaryType);
        }
 
        String totalDuration = entity.getTotalDuration();
        if (totalDuration != null) {
            stmt.bindString(6, totalDuration);
        }
 
        String totalDistance = entity.getTotalDistance();
        if (totalDistance != null) {
            stmt.bindString(7, totalDistance);
        }
 
        String totalCalorie = entity.getTotalCalorie();
        if (totalCalorie != null) {
            stmt.bindString(8, totalCalorie);
        }
 
        String totalPowerGeneration = entity.getTotalPowerGeneration();
        if (totalPowerGeneration != null) {
            stmt.bindString(9, totalPowerGeneration);
        }
 
        String totalTimes = entity.getTotalTimes();
        if (totalTimes != null) {
            stmt.bindString(10, totalTimes);
        }
 
        String upgradeId = entity.getUpgradeId();
        if (upgradeId != null) {
            stmt.bindString(11, upgradeId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Summary readEntity(Cursor cursor, int offset) {
        Summary entity = new Summary( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // day
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // summaryType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // totalDuration
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // totalDistance
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // totalCalorie
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // totalPowerGeneration
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // totalTimes
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // upgradeId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Summary entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDay(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSummaryType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTotalDuration(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTotalDistance(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTotalCalorie(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTotalPowerGeneration(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTotalTimes(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpgradeId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Summary entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Summary entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Summary entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

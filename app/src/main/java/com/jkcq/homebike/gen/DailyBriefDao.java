package com.jkcq.homebike.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jkcq.homebike.db.DailyBrief;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAILY_BRIEF".
*/
public class DailyBriefDao extends AbstractDao<DailyBrief, Long> {

    public static final String TABLENAME = "DAILY_BRIEF";

    /**
     * Properties of entity DailyBrief.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ReportId = new Property(1, String.class, "reportId", false, "REPORT_ID");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property DeviceType = new Property(3, String.class, "deviceType", false, "DEVICE_TYPE");
        public final static Property ExerciseType = new Property(4, String.class, "exerciseType", false, "EXERCISE_TYPE");
        public final static Property Duration = new Property(5, String.class, "duration", false, "DURATION");
        public final static Property Distance = new Property(6, String.class, "distance", false, "DISTANCE");
        public final static Property Calorie = new Property(7, String.class, "calorie", false, "CALORIE");
        public final static Property PowerGeneration = new Property(8, String.class, "powerGeneration", false, "POWER_GENERATION");
        public final static Property ExerciseTime = new Property(9, String.class, "exerciseTime", false, "EXERCISE_TIME");
        public final static Property StrDate = new Property(10, String.class, "strDate", false, "STR_DATE");
        public final static Property PkInfo = new Property(11, String.class, "pkInfo", false, "PK_INFO");
        public final static Property Scenario = new Property(12, String.class, "scenario", false, "SCENARIO");
        public final static Property Course = new Property(13, String.class, "course", false, "COURSE");
    }


    public DailyBriefDao(DaoConfig config) {
        super(config);
    }
    
    public DailyBriefDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAILY_BRIEF\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"REPORT_ID\" TEXT," + // 1: reportId
                "\"USER_ID\" TEXT," + // 2: userId
                "\"DEVICE_TYPE\" TEXT," + // 3: deviceType
                "\"EXERCISE_TYPE\" TEXT," + // 4: exerciseType
                "\"DURATION\" TEXT," + // 5: duration
                "\"DISTANCE\" TEXT," + // 6: distance
                "\"CALORIE\" TEXT," + // 7: calorie
                "\"POWER_GENERATION\" TEXT," + // 8: powerGeneration
                "\"EXERCISE_TIME\" TEXT," + // 9: exerciseTime
                "\"STR_DATE\" TEXT," + // 10: strDate
                "\"PK_INFO\" TEXT," + // 11: pkInfo
                "\"SCENARIO\" TEXT," + // 12: scenario
                "\"COURSE\" TEXT);"); // 13: course
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_DAILY_BRIEF_EXERCISE_TIME_DESC ON \"DAILY_BRIEF\"" +
                " (\"EXERCISE_TIME\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAILY_BRIEF\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DailyBrief entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String reportId = entity.getReportId();
        if (reportId != null) {
            stmt.bindString(2, reportId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindString(4, deviceType);
        }
 
        String exerciseType = entity.getExerciseType();
        if (exerciseType != null) {
            stmt.bindString(5, exerciseType);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(6, duration);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(7, distance);
        }
 
        String calorie = entity.getCalorie();
        if (calorie != null) {
            stmt.bindString(8, calorie);
        }
 
        String powerGeneration = entity.getPowerGeneration();
        if (powerGeneration != null) {
            stmt.bindString(9, powerGeneration);
        }
 
        String exerciseTime = entity.getExerciseTime();
        if (exerciseTime != null) {
            stmt.bindString(10, exerciseTime);
        }
 
        String strDate = entity.getStrDate();
        if (strDate != null) {
            stmt.bindString(11, strDate);
        }
 
        String pkInfo = entity.getPkInfo();
        if (pkInfo != null) {
            stmt.bindString(12, pkInfo);
        }
 
        String scenario = entity.getScenario();
        if (scenario != null) {
            stmt.bindString(13, scenario);
        }
 
        String course = entity.getCourse();
        if (course != null) {
            stmt.bindString(14, course);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DailyBrief entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String reportId = entity.getReportId();
        if (reportId != null) {
            stmt.bindString(2, reportId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindString(4, deviceType);
        }
 
        String exerciseType = entity.getExerciseType();
        if (exerciseType != null) {
            stmt.bindString(5, exerciseType);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(6, duration);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(7, distance);
        }
 
        String calorie = entity.getCalorie();
        if (calorie != null) {
            stmt.bindString(8, calorie);
        }
 
        String powerGeneration = entity.getPowerGeneration();
        if (powerGeneration != null) {
            stmt.bindString(9, powerGeneration);
        }
 
        String exerciseTime = entity.getExerciseTime();
        if (exerciseTime != null) {
            stmt.bindString(10, exerciseTime);
        }
 
        String strDate = entity.getStrDate();
        if (strDate != null) {
            stmt.bindString(11, strDate);
        }
 
        String pkInfo = entity.getPkInfo();
        if (pkInfo != null) {
            stmt.bindString(12, pkInfo);
        }
 
        String scenario = entity.getScenario();
        if (scenario != null) {
            stmt.bindString(13, scenario);
        }
 
        String course = entity.getCourse();
        if (course != null) {
            stmt.bindString(14, course);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DailyBrief readEntity(Cursor cursor, int offset) {
        DailyBrief entity = new DailyBrief( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // reportId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // exerciseType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // duration
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // distance
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // calorie
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // powerGeneration
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // exerciseTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // strDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // pkInfo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // scenario
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // course
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DailyBrief entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setReportId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExerciseType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDuration(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDistance(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCalorie(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPowerGeneration(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setExerciseTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStrDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPkInfo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setScenario(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCourse(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DailyBrief entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DailyBrief entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DailyBrief entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.jkcq.homebike.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jkcq.homebike.db.UpgradeBikeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UPGRADE_BIKE_BEAN".
*/
public class UpgradeBikeBeanDao extends AbstractDao<UpgradeBikeBean, Long> {

    public static final String TABLENAME = "UPGRADE_BIKE_BEAN";

    /**
     * Properties of entity UpgradeBikeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property DeviceType = new Property(2, int.class, "deviceType", false, "DEVICE_TYPE");
        public final static Property ExerciseType = new Property(3, int.class, "exerciseType", false, "EXERCISE_TYPE");
        public final static Property Duration = new Property(4, int.class, "duration", false, "DURATION");
        public final static Property Distance = new Property(5, int.class, "distance", false, "DISTANCE");
        public final static Property Calorie = new Property(6, int.class, "calorie", false, "CALORIE");
        public final static Property PowerGeneration = new Property(7, int.class, "powerGeneration", false, "POWER_GENERATION");
        public final static Property SteppedFrequencyArray = new Property(8, String.class, "steppedFrequencyArray", false, "STEPPED_FREQUENCY_ARRAY");
        public final static Property PowerArray = new Property(9, String.class, "powerArray", false, "POWER_ARRAY");
        public final static Property HeartRateArray = new Property(10, String.class, "heartRateArray", false, "HEART_RATE_ARRAY");
        public final static Property RelevanceId = new Property(11, String.class, "relevanceId", false, "RELEVANCE_ID");
        public final static Property ExerciseTime = new Property(12, Long.class, "exerciseTime", false, "EXERCISE_TIME");
    }


    public UpgradeBikeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UpgradeBikeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPGRADE_BIKE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"DEVICE_TYPE\" INTEGER NOT NULL ," + // 2: deviceType
                "\"EXERCISE_TYPE\" INTEGER NOT NULL ," + // 3: exerciseType
                "\"DURATION\" INTEGER NOT NULL ," + // 4: duration
                "\"DISTANCE\" INTEGER NOT NULL ," + // 5: distance
                "\"CALORIE\" INTEGER NOT NULL ," + // 6: calorie
                "\"POWER_GENERATION\" INTEGER NOT NULL ," + // 7: powerGeneration
                "\"STEPPED_FREQUENCY_ARRAY\" TEXT," + // 8: steppedFrequencyArray
                "\"POWER_ARRAY\" TEXT," + // 9: powerArray
                "\"HEART_RATE_ARRAY\" TEXT," + // 10: heartRateArray
                "\"RELEVANCE_ID\" TEXT," + // 11: relevanceId
                "\"EXERCISE_TIME\" INTEGER NOT NULL );"); // 12: exerciseTime
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_UPGRADE_BIKE_BEAN_EXERCISE_TIME_DESC ON \"UPGRADE_BIKE_BEAN\"" +
                " (\"EXERCISE_TIME\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPGRADE_BIKE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UpgradeBikeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
        stmt.bindLong(3, entity.getDeviceType());
        stmt.bindLong(4, entity.getExerciseType());
        stmt.bindLong(5, entity.getDuration());
        stmt.bindLong(6, entity.getDistance());
        stmt.bindLong(7, entity.getCalorie());
        stmt.bindLong(8, entity.getPowerGeneration());
 
        String steppedFrequencyArray = entity.getSteppedFrequencyArray();
        if (steppedFrequencyArray != null) {
            stmt.bindString(9, steppedFrequencyArray);
        }
 
        String powerArray = entity.getPowerArray();
        if (powerArray != null) {
            stmt.bindString(10, powerArray);
        }
 
        String heartRateArray = entity.getHeartRateArray();
        if (heartRateArray != null) {
            stmt.bindString(11, heartRateArray);
        }
 
        String relevanceId = entity.getRelevanceId();
        if (relevanceId != null) {
            stmt.bindString(12, relevanceId);
        }
        stmt.bindLong(13, entity.getExerciseTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UpgradeBikeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
        stmt.bindLong(3, entity.getDeviceType());
        stmt.bindLong(4, entity.getExerciseType());
        stmt.bindLong(5, entity.getDuration());
        stmt.bindLong(6, entity.getDistance());
        stmt.bindLong(7, entity.getCalorie());
        stmt.bindLong(8, entity.getPowerGeneration());
 
        String steppedFrequencyArray = entity.getSteppedFrequencyArray();
        if (steppedFrequencyArray != null) {
            stmt.bindString(9, steppedFrequencyArray);
        }
 
        String powerArray = entity.getPowerArray();
        if (powerArray != null) {
            stmt.bindString(10, powerArray);
        }
 
        String heartRateArray = entity.getHeartRateArray();
        if (heartRateArray != null) {
            stmt.bindString(11, heartRateArray);
        }
 
        String relevanceId = entity.getRelevanceId();
        if (relevanceId != null) {
            stmt.bindString(12, relevanceId);
        }
        stmt.bindLong(13, entity.getExerciseTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UpgradeBikeBean readEntity(Cursor cursor, int offset) {
        UpgradeBikeBean entity = new UpgradeBikeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.getInt(offset + 2), // deviceType
            cursor.getInt(offset + 3), // exerciseType
            cursor.getInt(offset + 4), // duration
            cursor.getInt(offset + 5), // distance
            cursor.getInt(offset + 6), // calorie
            cursor.getInt(offset + 7), // powerGeneration
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // steppedFrequencyArray
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // powerArray
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // heartRateArray
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // relevanceId
            cursor.getLong(offset + 12) // exerciseTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UpgradeBikeBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceType(cursor.getInt(offset + 2));
        entity.setExerciseType(cursor.getInt(offset + 3));
        entity.setDuration(cursor.getInt(offset + 4));
        entity.setDistance(cursor.getInt(offset + 5));
        entity.setCalorie(cursor.getInt(offset + 6));
        entity.setPowerGeneration(cursor.getInt(offset + 7));
        entity.setSteppedFrequencyArray(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPowerArray(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHeartRateArray(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRelevanceId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setExerciseTime(cursor.getLong(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UpgradeBikeBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UpgradeBikeBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UpgradeBikeBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
